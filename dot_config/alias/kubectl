function wk8s {
    watch "kubectl get helmcharts.source.toolkit.fluxcd.io,gitrepositories.source.toolkit.fluxcd.io,helmreleases.helm.toolkit.fluxcd.io,kustomizations.kustomize.toolkit.fluxcd.io -A"
}

alias kbc="kubectl"

alias kbcgp="kubectl get pods"
alias kbcgn="kubectl get nodes"

# completed pods
alias kblpc="kubectl get pod --field-selector=status.phase==Succeeded"
alias kbdpc="kubectl delete pod --field-selector=status.phase==Succeeded"

# error pods
alias kblpe="kubectl get pod --field-selector=status.phase==Failed"
alias kbdpe="kubectl delete pod --field-selector=status.phase==Failed"

# Completed Jobs
alias kbljc="kubectl get jobs --field-selector=status.successful=1"
alias kbdjc="kubectl delete jobs --field-selector=status.successful=1"

# Failed Jobs
alias kblje="kubectl get jobs --field-selector=status.successful!=1"
alias kbdje="kubectl delete jobs --field-selector=status.successful!=1"

alias kbcc="kubectl config current-context"

function kbgpl {
    kubectl get pod -A -o custom-columns="Namespace:.metadata.namespace,NAME:spec.containers[*].name,Mem-Req:spec.containers[*].resources.requests.memory,Mem-Limit:spec.containers[*].resources.limits.memory"
}

function kbgpl2 {
    kubectl get pods --all-namespaces -o jsonpath='{range .items[*]}{"\n"}{.metadata.namespace}{range .spec.containers[*]}{"\n"}{.name};{.resources.requests.memory};{.resources.limits.memory}{end}{end}'
}

function kbgpl2csv {
    kbgpl2 > kubememory2.csv
}

function kbgplcsv {
    kbgpl
    kbgpl | tr -s '[:blank:]' ';' > kubememory.csv
}


function kbl {
    echo "nodes at $(kbcc)"
    kubectl get nodes -o wide
    echo ""

    echo "pods at $(kbcc)"
    kubectl get pods -o wide
    echo ""

    echo "services at $(kbcc)"
    kubectl get services
}

function kbla {
    kubectl get namespaces --output custom-columns="Name":.metadata.name --no-headers | while read -r line
        do
            case $line in "gatekeeper-system"|"kube-system"|"kube-node-lease"|"kube-public")
                ;;
            *)
                echo "namespace $line"
                echo "------------------------------"
                echo "nodes at $(kbcc) at namespace $line"
                kubectl get pods --namespace $line

                echo ""

                echo "pods at $(kbcc) at namespace $line"
                kubectl get pods -o wide --namespace $line
                echo ""

                echo "services at $(kbcc) at namespace $line"
                kubectl get services --namespace $line

                echo ""
                ;;
            esac
        done;
}

function kblrunasroot {
    for ns in $(kubectl get ns --no-headers -o custom-columns=":metadata.name"); do
        echo "Namespace: $ns"
        kubectl get pods -n $ns -o=jsonpath='{.items[*].metadata.name}' | tr ' ' '\n' | while read pod; do
            containers=$(kubectl get pod $pod -n $ns -o jsonpath='{.spec.containers[*].name}')
            for container in $containers; do
                run_as_user=$(kubectl get pod $pod -n $ns -o jsonpath="{.spec.containers[?(@.name=='$container')].securityContext.runAsUser}")
                if [ -z "$run_as_user" ] || [ "$run_as_user" = "0" ]; then
                    echo "Pod: $pod, Container: $container, Namespace: $ns, Running as root or without securityContext"
                fi
            done
        done
    done
}

function kbgetpodips {
    kubectl get pods -A -o json | jq -r '.items[] | "\(.status.podIP) \t \(.metadata.name)"' | sort -t . -k1,1n -k2,2n -k3,3n -k4,4n
}
